name: Build and Push to release branch

on:
  push:
    tags:
      - '*'
jobs:
  build:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Composer
        uses: php-actions/composer@v1
        with:
          command: install
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Cache Node.js modules
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install dependencies
        run: npm ci
      - name: Build Project
        run: npm run production --if-present
      - name: remove node modules
        run: rm -R node_modules
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: show tagname
        run: echo ${{steps.tag.outputs.tag}}
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          filename: 'commander.zip'
          exclusions: '/*src/* /*.git/* /*.github/* webpack.mix.js mix-manifest.json package-lock.json composer.json composer.lock package.json .editorconfig .gitignore .gitattributes'
      - name: List all Files # This would actually build your project, using zip for an example artifact
        run: |
          ls -al
      # - name: Archive production artifacts
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: dist
      #     path: dist

      # - name: Archive Release
      #   uses: thedoctor0/zip-release@master
      #   with:
      #     filename: 'release.zip'
      #     exclusions: '*.git* /*node_modules/* .editorconfig'
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: release_${{ github.event.head_commit.message }}
          release_name: Release_${{ github.event.head_commit.message }}
          body: |
            Release_${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
      # - name: remove vendor
      #   run: rm -R vendor
      # - name: remove dist
      #   run: rm -R dist
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./commander.zip
          asset_name: commander.zip
          asset_content_type: application/zip
      - name: remove zip for new branch
        run: rm commander.zip
      - name: Git Commit and Push w/ Force Push
        uses: dciborow/commit@0.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push-branch: 'release_${{ github.event.head_commit.message }}'
          commit-message: 'build for release_${{ github.event.head_commit.message }}'
          force-add: 'true'
          force-push: 'true'
          name: ${{ github.event.pusher.name }}
          email: ${{ github.event.pusher.email }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
